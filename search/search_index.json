{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b WEB 2.2 \u041f\u0435\u043d\u044c\u043a\u043e\u0432 \u0413\u0435\u043e\u0440\u0433\u0438\u0439, K3341, 335108","title":"Home"},{"location":"#web-22","text":"\u041f\u0435\u043d\u044c\u043a\u043e\u0432 \u0413\u0435\u043e\u0440\u0433\u0438\u0439, K3341, 335108","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b WEB 2.2"},{"location":"lab1/task1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 server.py import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) SERVER_ADDRESS = (\"127.0.0.1\", 1024) MESSAGE = b\"Hello, client!\" BUFFER_SIZE = 1024 print(f\"Starting up on {SERVER_ADDRESS}\") server_socket.bind(SERVER_ADDRESS) while True: print(\"Waiting to receive message..\") data, client_address = server_socket.recvfrom(BUFFER_SIZE) print(f\"Received message: {data}, from {client_address}\") server_socket.sendto(MESSAGE, client_address) print(f\"Sent message {MESSAGE} back to {client_address}\") client.py : import socket SERVER_ADDRESS = (\"127.0.0.1\", 1024) MESSAGE = b\"Hello, server!\" BUFFER_SIZE = 1024 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) try: print(f\"Sending {MESSAGE}\") client_socket.sendto(MESSAGE, SERVER_ADDRESS) print(\"Waiting to receive..\") response, server = client_socket.recvfrom(BUFFER_SIZE) print(f\"Received {response} from {server}\") finally: client_socket.close() print(\"Socket closed\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#1-1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task1/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task1/#_3","text":"server.py import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) SERVER_ADDRESS = (\"127.0.0.1\", 1024) MESSAGE = b\"Hello, client!\" BUFFER_SIZE = 1024 print(f\"Starting up on {SERVER_ADDRESS}\") server_socket.bind(SERVER_ADDRESS) while True: print(\"Waiting to receive message..\") data, client_address = server_socket.recvfrom(BUFFER_SIZE) print(f\"Received message: {data}, from {client_address}\") server_socket.sendto(MESSAGE, client_address) print(f\"Sent message {MESSAGE} back to {client_address}\") client.py : import socket SERVER_ADDRESS = (\"127.0.0.1\", 1024) MESSAGE = b\"Hello, server!\" BUFFER_SIZE = 1024 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) try: print(f\"Sending {MESSAGE}\") client_socket.sendto(MESSAGE, SERVER_ADDRESS) print(\"Waiting to receive..\") response, server = client_socket.recvfrom(BUFFER_SIZE) print(f\"Received {response} from {server}\") finally: client_socket.close() print(\"Socket closed\")","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/task2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.). \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - 1: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. server.py import socket import math def calc_hypotenuse(a: float, b: float) -> float: if a <= 0 or b <= 0: raise ValueError(\"The lengths of the sides must be positive numbers.\") return math.sqrt(a**2 + b**2) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) SERVER_ADDRESS = (\"localhost\", 1234) BUFFER_SIZE = 1024 server_socket.bind(SERVER_ADDRESS) server_socket.listen(0) print(f\"Listening on {SERVER_ADDRESS}\") client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") while True: try: request = client_socket.recv(BUFFER_SIZE).decode() print(f\"Received: {request}\") try: a, b = map(float, request.split(\" \")) response = calc_hypotenuse(a, b) except Exception as err: response = f\"Something went wrong: {err}\" client_socket.send(str(response).encode()) except Exception as e: print(f\"Error: {e}\") client_socket.close() print(\"Connection to client closed\") server_socket.close() break client.py : import socket SERVER_ADDRESS = (\"localhost\", 1234) BUFFER_SIZE = 1024 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(SERVER_ADDRESS) while True: data = input(\"Enter space-separated two numbers: \") if not data: break client_socket.send(data.encode()) response = client_socket.recv(BUFFER_SIZE).decode() print(f\"Received: {response}\") client_socket.close() print(\"Connection to server closed\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#1-2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.).","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task2/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task2/#_3","text":"\u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - 1: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. server.py import socket import math def calc_hypotenuse(a: float, b: float) -> float: if a <= 0 or b <= 0: raise ValueError(\"The lengths of the sides must be positive numbers.\") return math.sqrt(a**2 + b**2) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) SERVER_ADDRESS = (\"localhost\", 1234) BUFFER_SIZE = 1024 server_socket.bind(SERVER_ADDRESS) server_socket.listen(0) print(f\"Listening on {SERVER_ADDRESS}\") client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") while True: try: request = client_socket.recv(BUFFER_SIZE).decode() print(f\"Received: {request}\") try: a, b = map(float, request.split(\" \")) response = calc_hypotenuse(a, b) except Exception as err: response = f\"Something went wrong: {err}\" client_socket.send(str(response).encode()) except Exception as e: print(f\"Error: {e}\") client_socket.close() print(\"Connection to client closed\") server_socket.close() break client.py : import socket SERVER_ADDRESS = (\"localhost\", 1234) BUFFER_SIZE = 1024 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(SERVER_ADDRESS) while True: data = input(\"Enter space-separated two numbers: \") if not data: break client_socket.send(data.encode()) response = client_socket.recv(BUFFER_SIZE).decode() print(f\"Received: {response}\") client_socket.close() print(\"Connection to server closed\")","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/task3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My website</title> </head> <body> <h1>Hello, client!</h1> <p>This is the main page of my website :^)</p> </body> </html> server.py import socket import os def get_index_page(): current_path = os.path.dirname(__file__) file_path = os.path.join(current_path, \"index.html\") file = open(file_path) content = file.read() file.close() return content SERVER_ADDRESS = (\"localhost\", 1234) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(SERVER_ADDRESS) server_socket.listen(0) print(f\"Listening on {SERVER_ADDRESS}\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024).decode() if not request: break print(f\"Received: {request}\") content = get_index_page() response = \"HTTP/1.0 200 OK\\n\\n\" + content client_socket.sendall(response.encode()) client_socket.close() server_socket.close() print(\"Server closed.\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#1-3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task3/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task3/#_3","text":"index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My website</title> </head> <body> <h1>Hello, client!</h1> <p>This is the main page of my website :^)</p> </body> </html> server.py import socket import os def get_index_page(): current_path = os.path.dirname(__file__) file_path = os.path.join(current_path, \"index.html\") file = open(file_path) content = file.read() file.close() return content SERVER_ADDRESS = (\"localhost\", 1234) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(SERVER_ADDRESS) server_socket.listen(0) print(f\"Listening on {SERVER_ADDRESS}\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024).decode() if not request: break print(f\"Received: {request}\") content = get_index_page() response = \"HTTP/1.0 200 OK\\n\\n\" + content client_socket.sendall(response.encode()) client_socket.close() server_socket.close() print(\"Server closed.\")","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/task4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP: 80% \u0431\u0430\u043b\u043b\u043e\u0432. - \u0414\u043b\u044f UDP \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 threading \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435. - \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0412\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u0447\u0430\u0442\u043e\u043c \u0441 TCP. server.py import socket import threading SERVER_ADDRESS = (\"192.168.0.102\", 1234) BUFFER_SIZE = 1024 clients: list[socket.socket] = [] def run_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(SERVER_ADDRESS) server_socket.listen() print(f\"Listening on {SERVER_ADDRESS}\") while True: accept_client(server_socket) def accept_client(server_socket: socket.socket): client_socket, client_address = server_socket.accept() clients.append(client_socket) send_all_clients(f\"{client_address} has joined the chat.\") thread = threading.Thread( target=serve_client, args=(server_socket, client_socket, client_address), ) thread.start() def serve_client( server_sock: socket.socket, client_sock: socket.socket, client_addr, ): while True: message = client_sock.recv(BUFFER_SIZE).decode() response = f\"{client_addr}: {message}\" send_all_clients_except_me(client_sock, response) def send_all_clients(message: str): for client in clients: client.sendall(message.encode()) def send_all_clients_except_me(sender: socket.socket, message: str): for client in clients: if client == sender: continue client.sendall(message.encode()) if __name__ == \"__main__\": run_server() client.py import socket import threading SERVER_ADDRESS = (\"192.168.0.102\", 1234) BUFFER_SIZE = 1024 def run_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(SERVER_ADDRESS) recv_thread = threading.Thread( target=recv_from_server, args=(client_socket,) ) recv_thread.start() send_thread = threading.Thread( target=send_to_server, args=(client_socket,) ) send_thread.start() def recv_from_server(client_socket: socket.socket): while True: message = client_socket.recv(BUFFER_SIZE).decode() print(message) def send_to_server(client_socket: socket.socket): while True: message = input() client_socket.sendall(message.encode()) if __name__ == \"__main__\": run_client()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#1-4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task4/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task4/#_3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP: 80% \u0431\u0430\u043b\u043b\u043e\u0432. - \u0414\u043b\u044f UDP \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 threading \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435. - \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:"},{"location":"lab1/task4/#_4","text":"\u0412\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u0447\u0430\u0442\u043e\u043c \u0441 TCP. server.py import socket import threading SERVER_ADDRESS = (\"192.168.0.102\", 1234) BUFFER_SIZE = 1024 clients: list[socket.socket] = [] def run_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(SERVER_ADDRESS) server_socket.listen() print(f\"Listening on {SERVER_ADDRESS}\") while True: accept_client(server_socket) def accept_client(server_socket: socket.socket): client_socket, client_address = server_socket.accept() clients.append(client_socket) send_all_clients(f\"{client_address} has joined the chat.\") thread = threading.Thread( target=serve_client, args=(server_socket, client_socket, client_address), ) thread.start() def serve_client( server_sock: socket.socket, client_sock: socket.socket, client_addr, ): while True: message = client_sock.recv(BUFFER_SIZE).decode() response = f\"{client_addr}: {message}\" send_all_clients_except_me(client_sock, response) def send_all_clients(message: str): for client in clients: client.sendall(message.encode()) def send_all_clients_except_me(sender: socket.socket, message: str): for client in clients: if client == sender: continue client.sendall(message.encode()) if __name__ == \"__main__\": run_server() client.py import socket import threading SERVER_ADDRESS = (\"192.168.0.102\", 1234) BUFFER_SIZE = 1024 def run_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(SERVER_ADDRESS) recv_thread = threading.Thread( target=recv_from_server, args=(client_socket,) ) recv_thread.start() send_thread = threading.Thread( target=send_to_server, args=(client_socket,) ) send_thread.start() def recv_from_server(client_socket: socket.socket): while True: message = client_socket.recv(BUFFER_SIZE).decode() print(message) def send_to_server(client_socket: socket.socket): while True: message = input() client_socket.sendall(message.encode()) if __name__ == \"__main__\": run_client()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/task5/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 HTTPserver.py import socket from HTTPRequest import HTTPRequest from HTTPResponse import HTTPResponse from Course import Course from CourseRepository import CourseRepository \"\"\" GET /courses/ POST /courses?name=&grade= \"\"\" class HTTPServer: def __init__(self, host=\"localhost\", port=1234): self._host = host self._port = port self._course_repo = CourseRepository() def run(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_socket.bind((self._host, self._port)) server_socket.listen() print(f\"Listening on {self._host}:{self._port}\") while True: client_socket, client_address = server_socket.accept() try: self.serve_client(client_socket) except Exception as e: print(\"Client serving failed: \", e) finally: server_socket.close() def serve_client(self, client_socket: socket.socket): try: data = self.recvall(client_socket) print(f\"Received:\\n{data}\") request = HTTPRequest(data) response = self.handle_request(request) self.send_response(client_socket, response) except Exception as e: self.send_error(client_socket, e) finally: client_socket.close() def recvall(self, client_socket: socket.socket): data = b\"\" while True: chunk = client_socket.recv(4096) data += chunk if not chunk: break if b\"\\r\\n\\r\\n\" in data: break return data.decode() def handle_request(self, request: HTTPRequest): match request.path: case \"/courses\": match request.method: case \"GET\": courses = self._course_repo.get_courses() body = self.get_html_courses(courses) headers = [ ( \"Content-Type\", \"text/html; charset=utf-8\", ), (\"Content-Length\", len(body)), ] return HTTPResponse(200, \"OK\", headers, body) case \"POST\": if request.query_params is None: raise ValueError(\"No query parameters provided\") self._course_repo.insert_course( request.query_params[\"name\"], int(request.query_params[\"grade\"]), ) return HTTPResponse(201, \"Created\") case _: return HTTPResponse(400, \"Bad Request\") def send_response( self, client_socket: socket.socket, response: HTTPResponse ): response_str = response.get_response_str() client_socket.sendall(response_str.encode()) print(f\"Sent:\\n{response_str}\") def send_error(self, client_socket: socket.socket, err: Exception): status = 500 status_text = \"Internal Server Error\" body = str(err) print(f\"Error: {body}\") response = HTTPResponse(status, status_text, body=body) self.send_response(client_socket, response) def get_html_courses(self, courses: list[Course]): html = \"<html><head><title>Courses</title></head><body>\" html += \"<h1>Courses</h1>\" if courses: html += \"<ul>\" for course in courses: html += f\"<li>ID: {course.id}, Name: {course.name},\\ Grade: {course.grade}</li>\" html += \"</ul>\" else: html += \"<p>No courses available.</p>\" html += \"</body></html>\" return html if __name__ == \"__main__\": host = \"localhost\" port = 1234 server = HTTPServer(host, port) server.run() HTTPRequest.py class HTTPRequest: def __init__(self, data): self.method = None self.uri = None self.path = None self.query_params: dict[str, any] | None = None self.version = \"HTTP/1.1\" self.headers: dict[str, str] = dict() self.body: str | None = None self.parse(data) def parse(self, data: str): lines = data.splitlines() request_line = lines[0] words = request_line.split() if len(words) != 3: raise Exception(\"Malformed request line\") self.method, self.uri, self.version = words self.parse_uri() if self.version != \"HTTP/1.1\": raise Exception(\"Unexpected HTTP version\") for line in lines[1:]: if line.strip() == \"\": break key, value = line.split(\":\", 1) self.headers[key.strip()] = value.strip() body_start_index = lines.index(\"\") + 1 self.body = \"\\n\".join(lines[body_start_index:]) def parse_uri(self): if \"?\" in self.uri: self.path, query = self.uri.split(\"?\", 1) self.parse_query(query) else: self.path = self.uri def parse_query(self, query: str): if not query: self.query_params = None return self.query_params = dict() for param in query.split(\"&\"): if \"=\" in param: key, value = param.split(\"=\", 1) self.query_params[key] = value else: self.query_params[param] = None HTTPResponse.py class HTTPResponse: def __init__(self, status, status_text, headers=None, body=None): self.status = status self.status_text = status_text self.headers = headers self.body = body self.version = \"HTTP/1.1\" def get_response_str(self) -> str: response = \"\" status_line = f\"{self.version} {self.status} {self.status_text}\\r\\n\" response += status_line if self.headers: for key, value in self.headers: header_line = f\"{key}: {value}\\r\\n\" response += header_line response += \"\\r\\n\" if self.body: response += self.body return response Course.py from dataclasses import dataclass @dataclass class Course: id: int name: str grade: int CourseRepository.py from Course import Course class CourseRepository: def __init__(self): self.courses: list[Course] = [] def get_courses(self) -> list[Course]: return self.courses def insert_course(self, name: str, grade: int): id = len(self.courses) + 1 course = Course(id, name, grade) self.courses.append(course) \u0417\u0430\u043f\u0443\u0441\u043a GET /courses - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0443\u0440\u0441\u044b $ curl localhost:1234/courses -i POST /courses?name=&grade= - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 $ curl localhost:1234/courses?name=WEB\\&grade=5 -X POST -i","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#1-5","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1, \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task5/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task5/#_3","text":"HTTPserver.py import socket from HTTPRequest import HTTPRequest from HTTPResponse import HTTPResponse from Course import Course from CourseRepository import CourseRepository \"\"\" GET /courses/ POST /courses?name=&grade= \"\"\" class HTTPServer: def __init__(self, host=\"localhost\", port=1234): self._host = host self._port = port self._course_repo = CourseRepository() def run(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_socket.bind((self._host, self._port)) server_socket.listen() print(f\"Listening on {self._host}:{self._port}\") while True: client_socket, client_address = server_socket.accept() try: self.serve_client(client_socket) except Exception as e: print(\"Client serving failed: \", e) finally: server_socket.close() def serve_client(self, client_socket: socket.socket): try: data = self.recvall(client_socket) print(f\"Received:\\n{data}\") request = HTTPRequest(data) response = self.handle_request(request) self.send_response(client_socket, response) except Exception as e: self.send_error(client_socket, e) finally: client_socket.close() def recvall(self, client_socket: socket.socket): data = b\"\" while True: chunk = client_socket.recv(4096) data += chunk if not chunk: break if b\"\\r\\n\\r\\n\" in data: break return data.decode() def handle_request(self, request: HTTPRequest): match request.path: case \"/courses\": match request.method: case \"GET\": courses = self._course_repo.get_courses() body = self.get_html_courses(courses) headers = [ ( \"Content-Type\", \"text/html; charset=utf-8\", ), (\"Content-Length\", len(body)), ] return HTTPResponse(200, \"OK\", headers, body) case \"POST\": if request.query_params is None: raise ValueError(\"No query parameters provided\") self._course_repo.insert_course( request.query_params[\"name\"], int(request.query_params[\"grade\"]), ) return HTTPResponse(201, \"Created\") case _: return HTTPResponse(400, \"Bad Request\") def send_response( self, client_socket: socket.socket, response: HTTPResponse ): response_str = response.get_response_str() client_socket.sendall(response_str.encode()) print(f\"Sent:\\n{response_str}\") def send_error(self, client_socket: socket.socket, err: Exception): status = 500 status_text = \"Internal Server Error\" body = str(err) print(f\"Error: {body}\") response = HTTPResponse(status, status_text, body=body) self.send_response(client_socket, response) def get_html_courses(self, courses: list[Course]): html = \"<html><head><title>Courses</title></head><body>\" html += \"<h1>Courses</h1>\" if courses: html += \"<ul>\" for course in courses: html += f\"<li>ID: {course.id}, Name: {course.name},\\ Grade: {course.grade}</li>\" html += \"</ul>\" else: html += \"<p>No courses available.</p>\" html += \"</body></html>\" return html if __name__ == \"__main__\": host = \"localhost\" port = 1234 server = HTTPServer(host, port) server.run() HTTPRequest.py class HTTPRequest: def __init__(self, data): self.method = None self.uri = None self.path = None self.query_params: dict[str, any] | None = None self.version = \"HTTP/1.1\" self.headers: dict[str, str] = dict() self.body: str | None = None self.parse(data) def parse(self, data: str): lines = data.splitlines() request_line = lines[0] words = request_line.split() if len(words) != 3: raise Exception(\"Malformed request line\") self.method, self.uri, self.version = words self.parse_uri() if self.version != \"HTTP/1.1\": raise Exception(\"Unexpected HTTP version\") for line in lines[1:]: if line.strip() == \"\": break key, value = line.split(\":\", 1) self.headers[key.strip()] = value.strip() body_start_index = lines.index(\"\") + 1 self.body = \"\\n\".join(lines[body_start_index:]) def parse_uri(self): if \"?\" in self.uri: self.path, query = self.uri.split(\"?\", 1) self.parse_query(query) else: self.path = self.uri def parse_query(self, query: str): if not query: self.query_params = None return self.query_params = dict() for param in query.split(\"&\"): if \"=\" in param: key, value = param.split(\"=\", 1) self.query_params[key] = value else: self.query_params[param] = None HTTPResponse.py class HTTPResponse: def __init__(self, status, status_text, headers=None, body=None): self.status = status self.status_text = status_text self.headers = headers self.body = body self.version = \"HTTP/1.1\" def get_response_str(self) -> str: response = \"\" status_line = f\"{self.version} {self.status} {self.status_text}\\r\\n\" response += status_line if self.headers: for key, value in self.headers: header_line = f\"{key}: {value}\\r\\n\" response += header_line response += \"\\r\\n\" if self.body: response += self.body return response Course.py from dataclasses import dataclass @dataclass class Course: id: int name: str grade: int CourseRepository.py from Course import Course class CourseRepository: def __init__(self): self.courses: list[Course] = [] def get_courses(self) -> list[Course]: return self.courses def insert_course(self, name: str, grade: int): id = len(self.courses) + 1 course = Course(id, name, grade) self.courses.append(course)","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab1/task5/#_4","text":"GET /courses - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0443\u0440\u0441\u044b $ curl localhost:1234/courses -i POST /courses?name=&grade= - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043a\u0443\u0440\u0441 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 $ curl localhost:1234/courses?name=WEB\\&grade=5 -X POST -i","title":"\u0417\u0430\u043f\u0443\u0441\u043a"}]}